// Generated by CoffeeScript 1.9.3
(function() {
  module.exports = function(nodeScope) {
    var eve, event, h, handler, i, len, line, lis, results, ul;
    ul = nodeScope.Q('ul');
    lis = ul.QA('li');
    line = nodeScope.Q('.line');
    h = parseInt(getComputedStyle(line)['height']);
    handler = function(e) {
      var curIndex, curLi, i, index, item, j, len, len1, li, target, thisLi, type;
      target = e.target;
      type = e.type;
      curLi = ul.Q('.active');
      curIndex = curLi ? curLi.index() || 0 : void 0;
      for (i = 0, len = lis.length; i < len; i++) {
        item = lis[i];
        if (item.contains(target) || item === target) {
          thisLi = item;
        }
      }
      if (thisLi) {
        index = thisLi.index();
        if (type === 'click' || type === 'touchend') {
          e.preventDefault();
          for (j = 0, len1 = lis.length; j < len1; j++) {
            li = lis[j];
            li.removeClass('active');
          }
          return thisLi.addClass('active');
        } else {
          if (type === 'mouseover') {
            TweenLite.to(line, 0.35, {
              top: (index * h) + 'px',
              ease: Bounce.easeOut
            });
          }
          if (type === 'mouseout') {
            return TweenLite.to(line, 0.35, {
              top: (curIndex * h) + 'px',
              ease: Bounce.easeOut
            });
          }
        }
      }
    };
    event = ['mouseover', click, 'mouseout'];
    results = [];
    for (i = 0, len = event.length; i < len; i++) {
      eve = event[i];
      results.push(ul.on(eve, handler));
    }
    return results;
  };

}).call(this);

//# sourceMappingURL=labelList.js.map
