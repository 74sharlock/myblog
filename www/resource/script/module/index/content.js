// Generated by CoffeeScript 1.9.3
(function() {
  module.exports = function(nodeScope) {
    var As, cards, handler, isShowing, showList, thisService;
    As = this.actions;
    isShowing = false;
    prettyPrint();
    showList = D('articleList');
    cards = showList.QA('.content-item');
    thisService = {
      link: function(target) {
        var catId, contentBlock, href, loading, self, title;
        if (!isShowing) {
          self = this;
          isShowing = true;
          loading = CE('div');
          loading.className = 'ui inverted dimmer transition visible active';
          loading.innerHTML = '<div class="ui active loader"></div>';
          contentBlock = this.Q('.this-content');
          contentBlock.appendChild(loading);
          href = target.href;
          title = target.title;
          catId = target.data('cat');
          return require('../../global/getContent.js')(href, title, 'none', true, function(content) {
            var backButton;
            contentBlock.removeChild(loading);
            contentBlock.Q('.summary').innerHTML = content;
            backButton = CE('a');
            backButton.className = 'ui button teal back';
            backButton.href = '/list/' + catId + '.html';
            backButton.setAttribute('data-title', self.data('cat-name'));
            backButton.innerHTML = '返回';
            self.appendChild(backButton);
            return TweenLite.from(backButton, 0.5, {
              opacity: 0,
              rotation: "180deg",
              skewX: "30deg"
            }, 1);
          });
        }
      },
      back: function(target) {
        var dataWaiter, href, title;
        title = target.data('title');
        href = target.href;
        dataWaiter = new (require('../../global/dataWaiter.js'))();
        dataWaiter.show();
        return require('../../global/getContent.js')(href, title, 'none', false, function() {
          dataWaiter.close();
          return isShowing = false;
        });
      }
    };
    handler = function(e) {
      var card, i, len, method, target, thisCard;
      e.preventDefault();
      target = e.target;
      method = target.data('method');
      for (i = 0, len = cards.length; i < len; i++) {
        card = cards[i];
        if (card === target || card.contains(target)) {
          thisCard = card;
        }
      }
      if (thisCard && method) {
        return thisService[method].call(thisCard, target);
      }
    };
    if (showList) {
      return showList.on('click', handler);
    }
  };

}).call(this);

//# sourceMappingURL=content.js.map
